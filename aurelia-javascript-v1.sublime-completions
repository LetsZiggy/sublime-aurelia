{
	"scope": "source.js.aurelia.v1",
	"completions": [
		{
			"trigger": "auComponentClass",
			"contents": "import { customElement, inject } from \"aurelia-framework\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} {\n\tconstructor () {$0}\n\n\tcanActivate (params, routeConfig, navigationInstruction) {}\n\n\tactivate (params, routeConfig, navigationInstruction) {}\n\n\tcreated (owningView, myView) {}\n\n\tbind (bindingContext, overrideContext) {}\n\n\tattached () {}\n\n\tcanDeactivate () {}\n\n\tdeactivate () {}\n\n\tdetached () {}\n\n\tunbind () {}\n}",
			"annotation": "Component Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Component Class</a> snippet",
		},
		{
			"trigger": "auElementClass",
			"contents": "import { bindable${2:, bindingMode}, customElement, inject } from \"aurelia-framework\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject(Element)\nexport class ${1:PascalCase} {\n\t@bindable(${3:{ defaultBindingMode: bindingMode.${4:twoWay} \\}})\n\t${5:value}\n\n\tconstructor (element) {\n\t\tthis.element = element$0\n\t}\n\n\t${5:value}Changed (newValue, oldValue) {}\n\n\tcreated (owningView, myView) {}\n\n\tbind (bindingContext, overrideContext) {}\n\n\tattached () {}\n\n\tdetached () {}\n\n\tunbind () {}\n}",
			"annotation": "Element Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#creating-components\">Element Class</a> snippet",
		},
		{
			"trigger": "auComposeClass",
			"contents": "export class ${1:PascalCase} {\n\tdata = {$0}\n\n\tactivate (model) {\n\t\tthis.data = model\n\t}\n}",
			"annotation": "Compose Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/templating/dynamic-ui-composition#introduction\">Compose Class</a> snippet",
		},
		{
			"trigger": "auCreatedLifecycle",
			"contents": "created (owningView, myView) {$0}",
			"annotation": "created() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">created() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auBindLifecycle",
			"contents": "bind (bindingContext, overrideContext) {$0}",
			"annotation": "bind() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">bind() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auAttachedLifecycle",
			"contents": "attached () {$0}",
			"annotation": "attached() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">attached() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auDetachedLifecycle",
			"contents": "detached () {$0}",
			"annotation": "detached() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">detached() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auUnbindLifecycle",
			"contents": "unbind () {$0}",
			"annotation": "unbind() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">unbind() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auCanActivateLifecycle",
			"contents": "canActivate (params, routeConfig, navigationInstruction) {$0}",
			"annotation": "canActivate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">canActivate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auActivateLifecycle",
			"contents": "activate (params, routeConfig, navigationInstruction) {$0}",
			"annotation": "activate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">activate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auCanDeactivateLifecycle",
			"contents": "canDeactivate () {$0}",
			"annotation": "canDeactivate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">canDeactivate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auDeactivateLifecycle",
			"contents": "deactivate () {$0}",
			"annotation": "deactivate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">deactivate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auRouterClass",
			"contents": "import { customElement, inject } from \"aurelia-framework\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} {\n\trouter\n\n\tconstructor () {$0}\n\n\tconfigureRouter (config, router) {\n\t\tthis.router = router\n\t\tconfig.title = \"$2\"\n\t\tconfig.titleSeparator = \" | \"\n\t\tconfig.options.pushState = true\n\t\tconfig.options.root = \"/\"\n\t\tconfig.map([\n\t\t\t{\n\t\t\t\troute: \"$3\",\n\t\t\t\tname: \"$4\",\n\t\t\t\tmoduleId: \"$5\",\n\t\t\t\tnav: ${6:true},\n\t\t\t\ttitle: \"$7\",\n\t\t\t\tcaseSensitive: false,\n\t\t\t\tsettings: {},\n\t\t\t},\n\t\t])\n\n\t\tconfig.mapUnknownRoutes(\"$8\")\n\t\tconfig.fallbackRoute(\"$9\")\n\t}\n\n\tcreated (owningView, myView) {}\n\n\tbind (bindingContext, overrideContext) {}\n\n\tattached () {}\n\n\tdetached () {}\n\n\tunbind () {}\n}",
			"annotation": "Router Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">Router Class</a> snippet",
		},
		{
			"trigger": "auConfigureRouter",
			"contents": "configureRouter (config, router) {\n\tthis.router = router\n\tconfig.title = \"$1\"\n\tconfig.titleSeparator = \" | \"\n\tconfig.options.pushState = true\n\tconfig.options.root = \"/\"\n\tconfig.map([\n\t\t{\n\t\t\troute: \"$2\",\n\t\t\tname: \"$3\",\n\t\t\tmoduleId: \"$4\",\n\t\t\tnav: ${5:true},\n\t\t\ttitle: \"$6\",\n\t\t\tcaseSensitive: false,\n\t\t\tsettings: {},\n\t\t},$0\n\t])\n\n\tconfig.mapUnknownRoutes(\"$7\")\n\tconfig.fallbackRoute(\"$8\")\n}",
			"annotation": "configureRouter()",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">configureRouter()</a> snippet",
		},
		{
			"trigger": "auNewRoute",
			"contents": "{\n\troute: \"$1\",\n\tname: \"$2\",\n\tmoduleId: \"$3\",\n\tnav: ${4:true},\n\ttitle: \"$5\",\n\tcaseSensitive: false,\n\tsettings: {},\n},$0",
			"annotation": "new route boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">new route boilerplate</a> snippet",
		},
		{
			"trigger": "auAttributeClass",
			"contents": "import { customAttribute${3:, dynamicOptions}, inject } from \"aurelia-framework\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n${4:@dynamicOptions()}\n@inject(Element)\nexport class ${1:PascalCase} {\n\tconstructor (element) {\n\t\tthis.element = element$0\n\t}${7:\n\n\tvalueChanged (newValue, oldValue) {\\}}${5:\n\n\tpropertyChanged (name, newValue, oldValue) {\n\t\tswitch (name) {\n\t\t\tcase \"$6\":\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t\\}\n\t\\}}\n}",
			"annotation": "Attribute Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/fundamentals/cheat-sheet#custom-attributes\">Attribute Class</a> snippet",
		},
		{
			"trigger": "auValueConverterClass",
			"contents": "import { valueConverter } from \"aurelia-framework\"\n\n@valueConverter(\"${1/^([A-Z])/\\L$1/}\")\nexport class ${1:PascalCase} {\n${2:\tsignals = [ \"$3\" ]\n\n}\ttoView (${4:value}) {$0}${5:\n\n\tfromView (${6:value}) {\\}}\n}",
			"annotation": "ValueConverter Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/binding/value-converters\">ValueConverter Class</a> snippet",
		},
		{
			"trigger": "auBindingBehaviorClass",
			"contents": "import { bindingBehavior } from \"aurelia-framework\"\n\nconst interceptMethods = [ \"updateTarget\", \"updateSource\", \"callSource\" ]\n\n@bindingBehavior(\"${1/^([A-Z])/\\L$1/}\")\nexport class ${1:PascalCase} {\n\tbind (binding, scope, interceptor) {\n\t\tlet index = interceptMethods.length\n\n\t\twhile (index--) {\n\t\t\tconst method = interceptMethods[index]\n\n\t\t\tif (!binding[method]) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbinding[`intercepted-\\${ method }`] = binding[method]\n\n\t\t\tconst update = binding[method].bind(binding)\n\t\t\tbinding[method] = interceptor.bind(binding, method, update)\n\t\t}\n\t}\n\n\tunbind (binding, scope) {\n\t\tlet index = interceptMethods.length\n\n\t\twhile (index--) {\n\t\t\tconst method = interceptMethods[index]\n\n\t\t\tif (!binding[method]) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbinding[method] = binding[`intercepted-\\${ method }`]\n\t\t\tbinding[`intercepted-\\${ method }`] = null\n\t\t}\n\t}\n}$0",
			"annotation": "BindingBehavior Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/binding/binding-behaviors#custom-binding-behaviors\">BindingBehavior Class</a> snippet",
		},
		{
			"trigger": "auValidationRules",
			"contents": "ValidationRules\n\t.ensure(${1:(obj) => ${2:obj.}})\n\t.displayName(\"$3\")${4:\n\t.required()}\n\t.withMessage${5:Key}(\"$6\")\n\t.${7:on($8)}$0",
			"annotation": "ValidationRules()",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#defining-rules\">ValidationRules()</a> snippet",
		},
		{
			"trigger": "auValidationMessage",
			"contents": "validationMessages[\"$1\"] = `$2`$0",
			"annotation": "ValidationMessages",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#customizing-messages\">ValidationMessages</a> snippet",
		},
		{
			"trigger": "auTest",
			"contents": "import { bootstrap } from \"aurelia-bootstrapper\"\nimport { StageComponent } from \"aurelia-testing\"${1:\n\n$2}\n\nxdescribe(\"$3\", () => {\n\tlet component\n\n\tbeforeEach((done) => {\n\t\tcomponent = StageComponent\n\t\t\t.withResources(\"$4\")\n\t\t\t.inView(`\n\t\t\t\t<$4>\n\t\t\t\t</$4>\n\t\t\t`)\n\t\t\t.boundTo({})\n\n\t\tdone()\n\t})\n\n\tafterEach((done) => {\n\t\tcomponent\n\t\t\t.dispose()\n\n\t\tdone()\n\t})\n\n\txdescribe(\"[methodName]\", () => {\n\t\txit(\"should ...\", (done) => {\n\t\t\tcomponent\n\t\t\t\t.create(bootstrap)\n\t\t\t\t.then(async () => {\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tfail(error)\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t})\n\t})\n})",
			"annotation": "Test boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/testing/components\">Test boilerplate</a> snippet",
		},
	],
}
