{
	"scope": "source.ts.aurelia.v1",
	"completions": [
		{
			"trigger": "auComponentClass",
			"contents": "import { View, autoinject, customElement } from \"aurelia-framework\"\nimport { NavigationInstruction } from \"aurelia-router\"\nimport type { IObservable, RouteConfig, NavigationCommand } from \"aurelia-router\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@autoinject()\nexport class ${1:PascalCase} {\n\tconstructor () {$0}\n\n\tcanActivate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand | Promise<NavigationCommand> | PromiseLike<NavigationCommand> {}\n\n\tactivate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): void | Promise<void> | PromiseLike<void> | IObservable {}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tcanDeactivate (): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand {}\n\n\tdeactivate (): void | Promise<void> | PromiseLike<void> | IObservable {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}",
			"annotation": "Component Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Component Class</a> snippet",
		},
		{
			"trigger": "auElementClass",
			"contents": "import { View, autoinject, bindable${2:, bindingMode}, customElement } from \"aurelia-framework\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@autoinject()\nexport class ${1:PascalCase} {\n\t@bindable(${3:{ defaultBindingMode: bindingMode.${4:twoWay} \\}})\n\t${5:value}: ${6:any}\n\n\tconstructor (private element: Element) {$0}\n\n\t${5:value}Changed (newValue: ${6:any}, oldValue: ${6:any}): void {}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}",
			"annotation": "Element Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#creating-components\">Element Class</a> snippet",
		},
		{
			"trigger": "auComposeClass",
			"contents": "export class ${1:PascalCase} {\n\tdata: ${2:any} = {$0}\n\n\tactivate (model: ${2:any}): void | Promise<void> | PromiseLike<void> {\n\t\tthis.data = model\n\t}\n}",
			"annotation": "Compose Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/templating/dynamic-ui-composition#introduction\">Compose Class</a> snippet",
		},
		{
			"trigger": "auCreatedLifecycle",
			"contents": "created (owningView: View, myView: View): void {$0}",
			"annotation": "created() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">created() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auBindLifecycle",
			"contents": "bind (bindingContext: Object, overrideContext: Object): void {$0}",
			"annotation": "bind() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">bind() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auAttachedLifecycle",
			"contents": "attached (): void {$0}",
			"annotation": "attached() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">attached() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auDetachedLifecycle",
			"contents": "detached (): void {$0}",
			"annotation": "detached() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">detached() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auUnbindLifecycle",
			"contents": "unbind (): void {$0}",
			"annotation": "unbind() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">unbind() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auCanActivateLifecycle",
			"contents": "canActivate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand | Promise<NavigationCommand> | PromiseLike<NavigationCommand> {$0}",
			"annotation": "canActivate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">canActivate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auActivateLifecycle",
			"contents": "activate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): void | Promise<void> | PromiseLike<void> | IObservable {$0}",
			"annotation": "activate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">activate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auCanDeactivateLifecycle",
			"contents": "canDeactivate (): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand {$0}",
			"annotation": "canDeactivate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">canDeactivate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auDeactivateLifecycle",
			"contents": "deactivate (): void | Promise<void> | PromiseLike<void> | IObservable {$0}",
			"annotation": "deactivate() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">deactivate() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auRouterClass",
			"contents": "import { View, autoinject, customElement } from \"aurelia-framework\"\nimport { RouterConfiguration, Router } from \"aurelia-router\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@autoinject()\nexport class ${1:PascalCase} {\n\trouter: Router\n\n\tconstructor () {$0}\n\n\tconfigureRouter (config: RouterConfiguration, router: Router): void | Promise<void> | PromiseLike<void> {\n\t\tthis.router = router\n\t\tconfig.title = \"$2\"\n\t\tconfig.titleSeparator = \" | \"\n\t\tconfig.options.pushState = true\n\t\tconfig.options.root = \"/\"\n\t\tconfig.map([\n\t\t\t{\n\t\t\t\troute: \"$3\",\n\t\t\t\tname: \"$4\",\n\t\t\t\tmoduleId: \"$5\",\n\t\t\t\tnav: ${6:true},\n\t\t\t\ttitle: \"$7\",\n\t\t\t\tcaseSensitive: false,\n\t\t\t\tsettings: {},\n\t\t\t},\n\t\t])\n\n\t\tconfig.mapUnknownRoutes(\"$8\")\n\t\tconfig.fallbackRoute(\"$9\")\n\t}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}",
			"annotation": "Router Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">Router Class</a> snippet",
		},
		{
			"trigger": "auConfigureRouter",
			"contents": "configureRouter (config: RouterConfiguration, router: Router): void | Promise<void> | PromiseLike<void> {\n\tthis.router = router\n\tconfig.title = \"$1\"\n\tconfig.titleSeparator = \" | \"\n\tconfig.options.pushState = true\n\tconfig.options.root = \"/\"\n\tconfig.map([\n\t\t{\n\t\t\troute: \"$2\",\n\t\t\tname: \"$3\",\n\t\t\tmoduleId: \"$4\",\n\t\t\tnav: ${5:true},\n\t\t\ttitle: \"$6\",\n\t\t\tcaseSensitive: false,\n\t\t\tsettings: {},\n\t\t},$0\n\t])\n\n\tconfig.mapUnknownRoutes(\"$7\")\n\tconfig.fallbackRoute(\"$8\")\n}",
			"annotation": "configureRouter()",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">configureRouter()</a> snippet",
		},
		{
			"trigger": "auNewRoute",
			"contents": "{\n\troute: \"$1\",\n\tname: \"$2\",\n\tmoduleId: \"$3\",\n\tnav: ${4:true},\n\ttitle: \"$5\",\n\tcaseSensitive: false,\n\tsettings: {},\n},$0",
			"annotation": "new route boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">new route boilerplate</a> snippet",
		},
		{
			"trigger": "auAttributeClass",
			"contents": "import { autoinject, customAttribute${3:, dynamicOptions} } from \"aurelia-framework\"\n\n@customAttribute(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n${4:@dynamicOptions()}\n@autoinject()\nexport class ${1:PascalCase} {\n\tconstructor (private element: Element) {$0}${7:\n\n\tvalueChanged (newValue: ${2:any}, oldValue: ${2:any}) {\\}}${5:\n\n\tpropertyChanged (name: string, newValue: ${2:any}, oldValue: ${2:any}) {\n\t\tswitch (name) {\n\t\t\tcase \"$6\":\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t\\}\n\t\\}}\n}",
			"annotation": "Attribute Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/fundamentals/cheat-sheet#custom-attributes\">Attribute Class</a> snippet",
		},
		{
			"trigger": "auValueConverterClass",
			"contents": "import { valueConverter } from \"aurelia-framework\"\n\n@valueConverter(\"${1/^([A-Z])/\\L$1/}\")\nexport class ${1:PascalCase} {\n${2:\tsignals = [ \"$3\" ]\n\n}\ttoView (${4:value}: ${5:any}) {$0}${6:\n\n\tfromView (${7:value}: ${8:any}) {\\}}\n}",
			"annotation": "ValueConverter Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/binding/value-converters\">ValueConverter Class</a> snippet",
		},
		{
			"trigger": "auBindingBehaviorClass",
			"contents": "import { bindingBehavior } from \"aurelia-framework\"\nimport type { Binding, Scope } from \"aurelia-binding\"\n\ndeclare module \"aurelia-binding\" {\n\tinterface Binding {\n\t\t\"intercepted-updateTarget\"?: null | ((value: any) => void),\n\t\t\"intercepted-updateSource\"?: null | ((value: any) => void),\n\t\t\"intercepted-callSource\"?: null | ((value: any) => void),\n\t}\n}\n\ntype Method = \"updateTarget\" | \"updateSource\" | \"callSource\"\n\nconst interceptMethods: Method[] = [ \"updateTarget\", \"updateSource\", \"callSource\" ]\n\n@bindingBehavior(\"${1/^([A-Z])/\\L$1/}\")\nexport class ${1:PascalCase} {\n\tbind (binding: Binding, scope: Scope, interceptor: any): void {\n\t\tlet index = interceptMethods.length\n\n\t\twhile (index--) {\n\t\t\tconst method = interceptMethods[index] as Method\n\n\t\t\tif (!binding[method]) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbinding[`intercepted-\\${ method }`] = binding[method]\n\n\t\t\tconst update = (binding[method] as NonNullable<Binding[Method]>).bind(binding)\n\t\t\tbinding[method] = interceptor.bind(binding, method, update)\n\t\t}\n\t}\n\n\tunbind (binding: Binding, scope: Scope): void {\n\t\tlet index = interceptMethods.length\n\n\t\twhile (index--) {\n\t\t\tconst method = interceptMethods[index] as Method\n\n\t\t\tif (!binding[method]) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbinding[method] = binding[`intercepted-\\${ method }`] as NonNullable<Binding[Method]>\n\t\t\tbinding[`intercepted-\\${ method }`] = null\n\t\t}\n\t}\n}$0",
			"annotation": "BindingBehavior Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/binding/binding-behaviors#custom-binding-behaviors\">BindingBehavior Class</a> snippet",
		},
		{
			"trigger": "auValidationRules",
			"contents": "ValidationRules\n\t.ensure(${1:(obj: ${2:any}) => ${3:obj.}})\n\t.displayName(\"$4\")${5:\n\t.required()}\n\t.withMessage${6:Key}(\"$7\")\n\t.${8:on($9)}$0",
			"annotation": "ValidationRules()",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#defining-rules\">ValidationRules()</a> snippet",
		},
		{
			"trigger": "auValidationMessage",
			"contents": "validationMessages[\"$1\"] = `$2`$0",
			"annotation": "ValidationMessages",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#customizing-messages\">ValidationMessages</a> snippet",
		},
		{
			"trigger": "auTest",
			"contents": "import { bootstrap } from \"aurelia-bootstrapper\"\nimport { ComponentTester, StageComponent } from \"aurelia-testing\"${1:\n\n$2}\n\nxdescribe(\"$3\", () => {\n\tlet component: ComponentTester\n\n\tbeforeEach((done) => {\n\t\tcomponent = StageComponent\n\t\t\t.withResources(\"$4\")\n\t\t\t.inView(`\n\t\t\t\t<$4>\n\t\t\t\t</$4>\n\t\t\t`)\n\t\t\t.boundTo({})\n\n\t\tdone()\n\t})\n\n\tafterEach((done) => {\n\t\tcomponent\n\t\t\t.dispose()\n\n\t\tdone()\n\t})\n\n\txdescribe(\"[methodName]\", () => {\n\t\txit(\"should ...\", (done) => {\n\t\t\tcomponent\n\t\t\t\t.create(bootstrap)\n\t\t\t\t.then(async () => {\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t\t\t.catch((error: any) => {\n\t\t\t\t\tfail(error)\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t})\n\t})\n})",
			"annotation": "Test boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"https://aurelia.io/docs/testing/components\">Test boilerplate</a> snippet",
		},
	],
}
