{
	"scope": "source.ts.aurelia.v2",
	"completions": [
		{
			"trigger": "auAttributeClass",
			"contents": "import {${4: bindable}${9:, BindingMode}, customAttribute, inject } from \"aurelia\"\nimport type { ControllerVisitor, ICustomAttributeController, ICustomAttributeViewModel, IHydratableController, IHydratedController, IInstruction, INode } from \"aurelia\"\n\n@customAttribute({\n\tname: \"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\",${2:\n\taliases: [ \"$3\" ],}\n})\n@inject()\nexport class ${1:PascalCase} implements ICustomAttributeViewModel {\n${17:\treadonly \\$controller: ICustomAttributeController<this>\n}${5:\t@bindable(${6:{ ${7:primary: ${8:true}}${10:, mode: BindingMode.${11:twoWay}}${12:, callback: \"${14:value}Changed\"} \\}})\n\t${15:${14:value}}: ${16:any}\n\n}\tconstructor (private readonly element: INode<HTMLElement>) {$0}${13:\n\n\t${14:value}Changed (newValue: ${16:any}, oldValue: ${16:any}): void {\\}}${18:\n\n\tlink (controller: IHydratableController, childController: ICustomAttributeController, target: INode, instruction: IInstruction): void {\\}}${19:\n\n\tcreated (controller: ICustomAttributeController): void {\\}}${20:\n\n\t${21:async }binding (initiator: IHydratedController, parent: IHydratedController): void | Promise<void> {\\}}${22:\n\n\t${23:async }bound (initiator: IHydratedController, parent: IHydratedController): void | Promise<void> {\\}}${24:\n\n\t${25:async }attaching (initiator: IHydratedController, parent: IHydratedController): void | Promise<void> {\\}}${26:\n\n\t${27:async }attached (initiator: IHydratedController): void | Promise<void> {\\}}${28:\n\n\t${29:async }detaching (initiator: IHydratedController, parent: IHydratedController): void | Promise<void> {\\}}${30:\n\n\t${31:async }unbinding (initiator: IHydratedController, parent: IHydratedController): void | Promise<void> {\\}}${32:\n\n\tdispose (): void {\\}}${33:\n\n\taccept (visitor: ControllerVisitor): void | true {\\}}\n}",
			"annotation": "Attribute Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">Attribute Class</a> snippet",
		},
		{
			"trigger": "auValueConverterClass",
			"contents": "import { valueConverter } from \"aurelia\"\nimport type { ValueConverterInstance } from \"aurelia\"\n\n@valueConverter(\"${1/^([A-Z])/\\L$1/}\")\nexport class ${1:PascalCase} implements ValueConverterInstance {\n${2:\tsignals: string[] = [ \"$3\" ]\n\n}\ttoView (${4:value}: ${5:any}): ${5:any} {$0}${6:\n\n\tfromView (${7:value}: ${8:any}): ${8:any} {\\}}\n}",
			"annotation": "ValueConverter Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">ValueConverter Class</a> snippet",
		},
		/*{
			// https://docs.aurelia.io/templates/binding-behaviors#custom-binding-behaviors
			// Example seems wrong
			"trigger": "auBindingBehaviorClass",
			"contents": "import { bindingBehavior } from \"aurelia\"\nimport type { IBinding, Scope } from \"@aurelia/runtime\"\nimport type { BindingBehaviorInstance } from \"aurelia\"\n\ntype Method = \"updateTarget\" | \"updateSource\" | \"callSource\"\n\nconst interceptMethods: Method[] = [ \"updateTarget\", \"updateSource\", \"callSource\" ]\n\n@bindingBehavior(\"${1/^([A-Z])/\\L$1/}\")\nexport class ${1:PascalCase} implements BindingBehaviorInstance {\n\tbind (scope: Scope, binding: IBinding): void {\n\t\tlet index = interceptMethods.length\n\n\t\twhile (index--) {\n\t\t\tconst methodName = interceptMethods[index]\n\t\t\tconst method = binding[method]\n\n\t\t\tif (!method) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbinding[`intercepted-\\${ methodName }`] = method\n\t\t\tbinding[methodName] = method.bind(binding)\n\t\t}\n\t}\n\n\tunbind (scope: Scope, binding: IBinding): void {\n\t\tlet index = interceptMethods.length\n\n\t\twhile (index--) {\n\t\t\tconst methodName = interceptMethods[index]\n\n\t\t\tif (!binding[methodName]) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbinding[methodName] = binding[`intercepted-\\${ methodName }`]\n\t\t\tbinding[`intercepted-\\${ methodName }`] = null\n\t\t}\n\t}\n}$0",
			"annotation": "BindingBehavior Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">BindingBehavior Class</a> snippet",
		},*/
		{
			"trigger": "auComposeClass",
			"contents": "export class ${1:PascalCase} {\n\tdata: ${2:any} = {$0}\n\n\t${3:async }activate (model: ${2:any}): void | Promise<void> | PromiseLike<void> {\n\t\tthis.data = model\n\t}\n}",
			"annotation": "Compose Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">Compose Class</a> snippet",
		},
		{
			"trigger": "auElementClass",
			"contents": "import { BindingMode, bindable, customElement, inject } from \"aurelia\"\nimport type { ControllerVisitor, CustomElementDefinition, ICompiledCustomElementController, IContainer, IContextualCustomElementController, ICustomElementController, ICustomElementViewModel, IDryCustomElementController, IHydratedController, PartialCustomElementDefinition } from \"aurelia\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} implements ICustomElementViewModel {\n${15:\treadonly \\$controller: ICustomElementController<this>\n}\t@bindable(${2:{ ${3:mode: BindingMode.${4:twoWay}}${5:, callback: \"${6:value}Changed\"}${8:, set: (value) => ${9:value}}${10:, type: ${11:Object}}${13:, nullable: ${14:false}} \\}})\n\t${7:${6:value}}: ${12:any}\n\n\tconstructor () {$0}\n\n\t${6:value}Changed (newValue: ${12:any}, oldValue: ${12:any}): void {}${16:\n\n\tdefine (controller: IDryCustomElementController, parentContainer: IContainer, definition: CustomElementDefinition): PartialCustomElementDefinition | void {\\}}${17:\n\n\thydrating (controller: IContextualCustomElementController): void {\\}}${18:\n\n\thydrated (controller: ICompiledCustomElementController): void {\\}}${19:\n\n\tcreated (controller: ICustomElementController): void {\\}}${20:\n\n\t${21:async }binding (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {\\}}${22:\n\n\t${23:async }bound (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {\\}}${24:\n\n\t${25:async }attaching (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {\\}}${26:\n\n\t${27:async }attached (initiator: IHydratedController): void | Promise<void> {\\}}${28:\n\n\t${29:async }detaching (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {\\}}${30:\n\n\t${31:async }unbinding (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {\\}}${32:\n\n\tdispose (): void {\\}}${33:\n\n\taccept (visitor: ControllerVisitor): void | true {\\}}\n}",
			"annotation": "Element Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">Element Class</a> snippet",
		},
		{
			"trigger": "auDefineLifecycle",
			"contents": "define (controller: IDryCustomElementController, parentContainer: IContainer, definition: CustomElementDefinition): PartialCustomElementDefinition | void {$0}",
			"annotation": "define() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">define() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auHydratingLifecycle",
			"contents": "hydrating (controller: IContextualCustomElementController): void {$0}",
			"annotation": "hydrating() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">hydrating() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auHydratedLifecycle",
			"contents": "hydrated (controller: ICompiledCustomElementController): void {$0}",
			"annotation": "hydrated() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">hydrated() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auCreatedLifecycle",
			"contents": "created (controller: ICustomElementController): void {$0}",
			"annotation": "created() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">created() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auBindingLifecycle",
			"contents": "${1:async }binding (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {$0}",
			"annotation": "binding() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">binding() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auBoundLifecycle",
			"contents": "${1:async }bound (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {$0}",
			"annotation": "bound() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">bound() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auAttachingLifecycle",
			"contents": "${1:async }attaching (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {$0}",
			"annotation": "attaching() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">attaching() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auAttachedLifecycle",
			"contents": "${1:async }attached (initiator: IHydratedController): void | Promise<void> {$0}",
			"annotation": "attached() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">attached() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auDetachingLifecycle",
			"contents": "${1:async }detaching (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {$0}",
			"annotation": "detaching() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">detaching() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auUnbindingLifecycle",
			"contents": "${1:async }unbinding (initiator: IHydratedController, parent: IHydratedController | null): void | Promise<void> {$0}",
			"annotation": "unbinding() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">unbinding() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auDisposeLifecycle",
			"contents": "dispose (): void {$0}",
			"annotation": "dispose() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">dispose() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auAcceptLifecycle",
			"contents": "accept (visitor: ControllerVisitor): void | true {$0}",
			"annotation": "accept() Component Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">accept() Component Lifecycle</a> snippet",
		},
		{
			"trigger": "auRouterClass",
			"contents": "import { customElement, inject } from \"aurelia\"\nimport { routes } from \"@aurelia/router\"\nimport type { IRoute, IRouteableComponent, IRouter } from \"@aurelia/router\"\n\n@routes([\n\t{\n\t\t$2\n\t}\n])\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} implements IRouteableComponent {\n\tconstructor (private readonly router: IRouter) {$0}\n}",
			"annotation": "router: Router Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: Router Class</a> snippet",
		},
		{
			"trigger": "auNewRoute",
			"contents": "{\n\tpath: \"$1\",${2:${5:\n\tcomponent: ${6:() => import(\"$7\")},}${8:\n\tid:\"$9\",}${10:\n\tcaseSensitive: ${11:false},}${12:\n\ttransitionPlan: \"${13:replace}\",}${14:\n\ttitle: \"$15\",}${16:\n\tviewport: \"$17\",}${18:\n\tdata: {$19\\},}${20:\n\troutes: [$21],}}${3:\n\tredirectTo: \"$4\",}\n}$0",
			"annotation": "router: new route boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: new route boilerplate</a> snippet",
		},
		{
			"trigger": "auRouteClass",
			"contents": "import { customElement, inject } from \"aurelia\"\nimport type { IRouteableComponent, LoadInstruction, Navigation, Parameters, RoutingInstruction } from \"@aurelia/router\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} implements IRouteableComponent {\n${2:\treadonly \\$controller: ICustomElementController<this>\n\n}\tconstructor () {$0}${3:\n\n\t${4:async }canLoad (parameters: Parameters, instruction: RoutingInstruction, navigation: Navigation): boolean | LoadInstruction | LoadInstruction[] | Promise<boolean | LoadInstruction | LoadInstruction[]> {\\}}${5:\n\n\t${6:async }loading (parameters: Parameters, instruction: RoutingInstruction, navigation: Navigation): void | Promise<void> {\\}}${7:\n\n\t${8:async }canUnload (instruction: RoutingInstruction, navigation: Navigation | null): boolean | Promise<boolean> {\\}}${9:\n\n\t${10:async }unloading (instruction: RoutingInstruction, navigation: Navigation | null): void | Promise<void> {\\}}\n}",
			"annotation": "router: Route Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: Route Class</a> snippet",
		},
		{
			"trigger": "auCanLoadLifecycle",
			"contents": "${1:async }canLoad (parameters: Parameters, instruction: RoutingInstruction, navigation: Navigation): boolean | LoadInstruction | LoadInstruction[] | Promise<boolean | LoadInstruction | LoadInstruction[]> {$0}",
			"annotation": "router: canLoad() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: canLoad() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auLoadingLifecycle",
			"contents": "${1:async }loading (parameters: Parameters, instruction: RoutingInstruction, navigation: Navigation): void | Promise<void> {$0}",
			"annotation": "router: loading() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: loading() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auCanUnloadLifecycle",
			"contents": "${1:async }canUnload (instruction: RoutingInstruction, navigation: Navigation | null): boolean | Promise<boolean> {$0}",
			"annotation": "router: canUnload() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: canUnload() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auUnloadingLifecycle",
			"contents": "${1:async }unloading (instruction: RoutingInstruction, navigation: Navigation | null): void | Promise<void> {$0}",
			"annotation": "router: unloading() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router: unloading() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auRouterClass",
			"contents": "import { customElement, inject } from \"aurelia\"\nimport { route } from \"@aurelia/router-lite\"\nimport type { IRouteViewModel, Routeable } from \"@aurelia/router-lite\"\n\n@route({\n\ttitle: \"\",\n\tfallback: \"\",\n\ttransitionPlan: \"\",\n\troutes: [\n\t\t{\n\t\t\t$2\n\t\t}\n\t],\n})\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} implements IRouteViewModel {\n\tconstructor(readonly router: IRouter) {$0}\n}",
			"annotation": "router-lite: Router Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: Router Class</a> snippet",
		},
		{
			"trigger": "auGetRouteConfigLifecycle",
			"contents": "${1:async }getRouteConfig (parentConfig: IRouteConfig | null, routeNode: RouteNode | null): IRouteConfig | Promise<IRouteConfig> {$0}",
			"annotation": "router-lite: getRouteConfig() method",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: getRouteConfig() method</a> snippet",
		},
		{
			"trigger": "auNewRoute",
			"contents": "{\n\tpath: \"$1\",${2:\n\tcomponent: import(\"$3\"),}${4:\n\tid:\"$5\",}${6:\n\ttitle: \"$7\",}${8:\n\tredirectTo: \"$9\",}${10:\n\tcaseSensitive: ${11:false},}${12:\n\tviewport: \"$13\",}${14:\n\tdata: {$15\\},}${16:\n\tnav: ${17:true},}\n}$0",
			"annotation": "router-lite: new route boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: new route boilerplate</a> snippet",
		},
		{
			"trigger": "auRouteClass",
			"contents": "import { customElement, inject } from \"aurelia\"\nimport type { IRouteConfig, IRouteViewModel, NavigationInstruction, Params, RouteNode } from \"@aurelia/router-lite\"\n\n@customElement(\"${1/(?(?=^)(?<a>[A-Z])|(?<b>[A-Z]))/\\L(?1$+{a}:-$+{b})/g}\")\n@inject()\nexport class ${1:PascalCase} implements IRouteViewModel {\n${2:\treadonly \\$controller: ICustomElementController<this>\n\n}\tconstructor () {$0}${3:\n\n\t${4:async }canLoad (params: Params, next: RouteNode, current: RouteNode | null): boolean | NavigationInstruction | NavigationInstruction[] | Promise<boolean | NavigationInstruction | NavigationInstruction[]> {\\}}${5:\n\n\t${6:async }loading (params: Params, next: RouteNode, current: RouteNode | null): void | Promise<void> {\\}}${7:\n\n\t${8:async }canUnload (next: RouteNode | null, current: RouteNode): boolean | Promise<boolean> {\\}}${9:\n\n\t${10:async }unloading (next: RouteNode | null, current: RouteNode): void | Promise<void> {\\}}\n}",
			"annotation": "router-lite: Route Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: Route Class</a> snippet",
		},
		{
			"trigger": "auCanLoadLifecycle",
			"contents": "${1:async }canLoad (params: Params, next: RouteNode, current: RouteNode | null): boolean | NavigationInstruction | NavigationInstruction[] | Promise<boolean | NavigationInstruction | NavigationInstruction[]> {$0}",
			"annotation": "router-lite: canLoad() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: canLoad() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auLoadingLifecycle",
			"contents": "${1:async }loading (params: Params, next: RouteNode, current: RouteNode | null): void | Promise<void> {$0}",
			"annotation": "router-lite: loading() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: loading() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auCanUnloadLifecycle",
			"contents": "${1:async }canUnload (next: RouteNode | null, current: RouteNode): boolean | Promise<boolean> {$0}",
			"annotation": "router-lite: canUnload() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: canUnload() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auUnloadingLifecycle",
			"contents": "${1:async }unloading (next: RouteNode | null, current: RouteNode): void | Promise<void> {$0}",
			"annotation": "router-lite: unloading() Route Lifecycle",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">router-lite: unloading() Route Lifecycle</a> snippet",
		},
		{
			"trigger": "auTest",
			"contents": "${1:import sinon from \"sinon\"\n}import { BrowserPlatform } from \"@aurelia/platform-browser\"\nimport { assert, createFixture, setPlatform } from \"@aurelia/testing\"\nimport { $3 } from \"$2\"\n\nconst platform = new BrowserPlatform(window)\nsetPlatform(platform)\nBrowserPlatform.set(globalThis, platform)\n\n${4:describe(\"${6:[valueConverter]}\", function() {\n\tit(\"should ${7:...}\", function() {\n\t\tconst sut = new $3()\n\n\t\tassert\n\t\t\t.strictEqual(sut, \"\")\n\t\\})\n\\})\n}${5:describe(\"${8:[customElement|customAttribute]}\", function() {\n\tit(\"should ${9:...}\", async function() {\n\t\tconst { appHost, startPromise, tearDown \\} = createFixture(\n\t\t\t`<${10:element-name}${11: attribute}>$12</${10:element-name}>`,\n\t\t\tclass ViewModel {$13\\},\n\t\t\t[ $3 ],\n\t\t)\n\n\t\tawait startPromise\n\n\t\tconst element = appHost\n\n\t\tassert\n\t\t\t.strictEqual(element, \"\")\n\n\t\tawait tearDown()\n\t\\})\n\\})\n}$0",
			"annotation": "Test boilerplate",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">Test boilerplate</a> snippet",
		},
		{
			"trigger": "auValidationRules",
			"contents": "validationRules\n\t.on(${1:target}${2:, \"${3:tag}\"})\n\t\t.ensure(\"${4:property}\")${5:\n\t\t\t.displayName(\"$6\")}${7:\n\t\t\t.required()${8:\n\t\t\t\t.withMessage(\"$9\")}}${10:\n\t\t\t.matches(/$11/)${12:\n\t\t\t\t.withMessage(\"$13\")}}${14:\n\t\t\t.email()${15:\n\t\t\t\t.withMessage(\"$16\")}}${17:\n\t\t\t.minLength($18)${19:\n\t\t\t\t.withMessage(\"$20\")}}${21:\n\t\t\t.maxLength($22)${23:\n\t\t\t\t.withMessage(\"$24\")}}${25:\n\t\t\t.minItems($26)${27:\n\t\t\t\t.withMessage(\"$28\")}}${29:\n\t\t\t.maxItems($30)${31:\n\t\t\t\t.withMessage(\"$32\")}}${33:\n\t\t\t.min($34)${35:\n\t\t\t\t.withMessage(\"$36\")}}${37:\n\t\t\t.max($38)${39:\n\t\t\t\t.withMessage(\"$40\")}}${41:\n\t\t\t.range($42, $43)${44:\n\t\t\t\t.withMessage(\"$45\")}}${46:\n\t\t\t.between($47, $48)${49:\n\t\t\t\t.withMessage(\"$50\")}}${51:\n\t\t\t.equals($52)${53:\n\t\t\t\t.withMessage(\"$54\")}}${55:\n\t\t\t.satisfies((value: any${56:, object: ${57:any}}): boolean | Promise<boolean> => {$58\\})${59:\n\t\t\t\t.withMessage(\"$60\")}}${61:\n\t\t\t.satisfiesRule(new $62($63))${64:\n\t\t\t\t.withMessage(\"$65\")}}$0",
			"annotation": "ValidationRules()",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">ValidationRules()</a> snippet",
		},
		{
			"trigger": "auNewValidationRule",
			"contents": "import { BaseValidationRule, validationRule } from \"@aurelia/validation\"\nimport type { IValidateable } from \"@aurelia/validation\"\n\n@validationRule({\n\taliases: [\n\t\t{ name: \"${2:messageKey}\", defaultMessage: \"${3:errorMessage}\" },\n\t]\n})\nexport class ${1:PascalCase}Rule extends BaseValidationRule {\npublic static readonly \\$TYPE: string = \"${1:PascalCase}Rule\"\n\n\tconstructor(private testNames: string[]) {\n\t\tsuper(\"${2:messageKey}\")\n\t}\n\n\texecute(value: unknown, _object?: IValidateable): boolean | Promise<boolean> {\n\t\t$0\n\t}${4:\n\n\taccept(visitor: IValidationVisitor): any {\n\t\treturn visitor.$5Rule(this);\n\t\\}}\n}",
			"annotation": "new validation rule Class",
			"kind": "snippet",
			"details": "Aurelia <a href=\"\">new validation rule Class</a> snippet",
		},
	],
}
